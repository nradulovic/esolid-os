/*********************************************************************************************//**
@file

@brief          Prekidne rutine u eSolid-u

@page 	        doc_irq_handlers Prekidne rutine u eSolid-u (preliminary)

@section        doc_irq_classes Logicke klase prekidnih rutina

    U eSolid-u postoje tri logicke klase prekidnih rutina:

    - Standardne prekidne rutine. Maskirni izvori prekida ne mogu da istisnu
    (male) delove jezgra eSolid-a sistema pa samim tim smeju da koriste API
    funkcije eSolid-a unutar prekidne rutine. Prekidne rutine koje pripadaju
    ovoj klasi moraju da se pisu po odredjenoj formi (pogledati 
    @ref doc_irq_writting).
    - Brze prekidne rutine. To su maskirni izvori prekida koji mogu da istisnu 
    delove jezgra eSolid sistema, a samim tim imaju i malu latenciju i otporniji 
    su na jitter efekat. Brze prekidne rutine ne smeju da pozivaju API funkcije
    eSolid-a. Ove prekidne rutine mogu da stave na red cekanje prekidne rutune
    nizeg prioriteta koje su pisane kao standardne prekidne rutine.
    - Nemaskirni prekidi. Nemaskirni prekidi su van kontrole eSolid-a. Prekidne
    rutine koje opsluzuju ove prekide imaju najmanju latenciju.     

    Podrska za gore pomenute prekide zavisi od port-a koji se koristi. Za 
    detalje pogledati dokumentaciju za zeljeni port.

@section        doc_irq_writting Kako pisati prekidne rutine

    eSolid omogucava konzistentno pisanje prekidnih rutina bez obzira na 
    platformu koja se koristi. Detalji platforme i detalji kompajlera su 
    sakriveni u ponudjenim makroima.

@subsection     doc_irq_regular Pisanje standardnih prekidnih rutina

    Standardne prekidne rutine su prekidne rutine unutar kojih se mogu pozvati 
    API funkcije. Prekidne rutine se pisu po sledecoj uopstenoj formi:

@include        irq_regular.c

@subsection     doc_irq_fast Pisanje brzih prekidnih rutina

    Na nekim arhitekturama postoji podrska za "brze" prekide. Ovi prekidi imaju 
    veci hardverski prioritet od eSolid-a i u njima ne smeju da se pozivaju 
    sistemske API funkcije.

@include        irq_fast.c

@subsection     irq_naming Imenovanje prekidnih rutina

        Na nekim arhitekturama @c myIRQ mora da bude broj vektora ili ime iz 
    unapred definisanog skupa. Pogledati napomene za port.
    
 *************************************************************************************************/
