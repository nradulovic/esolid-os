/** @file */
/** @defgroup   evt Event Management */
/** @{
@defgroup       evt_intf API
@defgroup       evt_impl Implementation
@defgroup       evt_cfg  Configuration
@}
*/
/** @page       page_evt Dogadjaj - Event objekat
@brief          Event object overview
@section        evt_intro Dogadjaj i prelazak
Događaj je pojava stimulusa koji može da okine promenu stanja i koji je značajan 
objektu ili aplikaciji.

Kao što se skup objekata definiše klasom čiji su oni uzorci, događaji se 
definišu tipom događaja čije uzorke predstavljaju događaji.

Ono što se modeluje zapravo su tipovi događaja, ali jednostavno ih zovemo 
događajima.

Događaj može imati parametre 

@section        evt_database Baza dogadjaja

eSolid definise centralizovanu bazu podataka za dogadjaje koji se koriste u 
sistemu. Baza podataka omogucuje efikasno i jednostavno opisivanje dogadjaja. 
Podaci su staticni, ne menjaju se u toku izvrsenja pa se zbog toga mogu cuvati u
ROM memoriji. Baza podataka definise sledece aspekte dogadjaja:
- znakovni identifikator: u C-u se identifikator implementira kao enumerator
- velicinu dogadjaja: za svaki tip dogadjaja se cuva velicina dogadjaja u 
    bajtovima
- tip dogadjaja: definise se C tip dogadjaja za svaki dogadjaj. Nekoliko 
    dogadjaja mogu imati isti tip.
- znakovni niz tipa dogadjaja: pored C tipa dogadjaja definise se znakovni niz
    koji se koristi za debug-ovanje
- znakovni niz opisa dogadjaja: kratak opis dogadjaja, sta on radi i za sta se
    koristi.
    
Baza podataka dogadjaja omogucuje eSolid-u da jednostavno poveze identifikator
dogadjaja sa njegovim ostalim atributuma. Naime, ako se eSolid-u preda samo
identifikator dogadjaja, on moze da iz baze podataka dobavi ostale informacije o
velicini, tipu, opisu i slicno.

@subsection     evt_db_create Kreiranje i popunjavanje baze podataka

Za implementaciju baze podataka koriste se takozvani X makroi. X makroima se
vrlo jednostavno generise baza podataka i ne postoji mogucnost da se pojavi
nesklad izmedju identifikatora dogadjaja i ostalih podataka o dogadjaju.

<h3>Definisanje tipova</h3>
Najpre se vrsi definisanje tipova dogadjaja. Tipovi dogadjaja su samo one 
struktrure koje su izvedene iz osnovne strukture dogadjaja @ref esEvt_T. 
Definisanje se radi na sledeci nacin:
- razmatra se sta je potrebno da dogadjaj prenese, odnosno, koje informacije
    neki dogadjaj treba da nosi sa sobom. Ove informacije se zovu parametri
    dogadjaja.
- kreira se struktura koja nosi ime novog tipa dogadjaja, sa elementima koji su
    odredjeni u prethodnom koraku. Zatim se tim elementima dodaje element 
    zaglavlja dogadjaja @ref esEvt_T koji mora da bude na prvoj poziciji. Ime
    tog elementa nije od znacaja, ali se preporucuju imena kao sto su @c super 
    ili @c header.
    
Primer 1:
- Dogadjaj treba da prenese jedan 32-bitni neoznaceni podatak. Ime novog tipa 
    dogadjaja neka je @c simpleEvt_T.

@code
typedef struct simpleEvt {
    esEvt_T         super;
    uint32_t        data;
} simpleEvt_T;
@endcode
<b>Listing 1</b> - Primer tipa dogadjaja sa jednim parametrom

Primer 2:
- Dogadjaj treba da prenese dva podatka, jedan je 8-bitni, a drugi 16-bitni.
    Oba podatka su neoznacena. Ukoliko je raspored podataka unutar strukture 
    nebitan, onda se preporucuje da se prvo navedu podaci koji zauzimaju veci 
    broj bajtiova, a zatim se navode podaci sa manjim zauzecem. Ovo pomaze 
    kompajlerima da kompaktnije organizuju strukture. Neka je ime novog tipa 
    dogadjaja @c moreComplex_T.
    
@code
typedef struct moreComplex {
    esEvt_T         super;
    uint16_t        data1;
    uint8_t         data2;
} moreComplex_T;
@endcode
<b>Listing 2</b> - Primer tipa dogadjaja sa dva parametra

Primer 3:
- Dogadjaj ne treba da prenese ni jedan parametar. Uglavnom se ovakvi dogadjaji
koriste samo za signalizaciju. Neka je tip takvog dogadjaja @c basicEvt_T.

@code
typedef struct basicEvt {
    esEvt_T         super;
} basicEvt_T;
@endcode
<b>Listing 3</b> - Primer tipa dogadjaja bez parametra

<h3>Popunjavanje podataka</h3>
Zatim se vrsi popunjavanje svih podataka o dogadjajima. Podaci se upisuju u vidu
sledece makro tabele:

<b>Listing 4</b> - Primer makro tabele sa dva dogadjaja 
@code
#define EVENT_TABLE(table)                                                      \
    table(ID1,              simpleEvt_T,    "This is a very simple event")      \
    table(ID2,              basicEvt_T,     "A signal event")
@endcode

U tabeli se prvo navodi identifikator dogadjaja. Identifikator dogadjaja je
enumeratator u C-u. Imena enumeratora se uglavnom pisu velikim slovima.

Sledeca kolona u tabeli je tip dogadjaja. Tip dogadjaja mora da odgovara nekoj
strukturi koja je kreirana u prethodnom koraku. Tip dogadjaja se koristi kako bi
se odredila velicina dogadjaja.

Zadnja kolona u tabeli je znakovni niz koji opisuje dogadjaj. Ukoliko nije 
potrebno navesti opis onda tu treba da se postavi prazan pokazivac na tekst,
odnosno, vrednost @c NULL:

@code
#define EVENT_TABLE(table)                                                      \
    table(ID1,              type1_T,        NULL)                               \
    table(ID2,              type2_T,        NULL)
@endcode
<b>Listing 5</b> - Makro tabela bez opisa dogadjaja

<h3>Instaciranje</h3>
Prvo se definisu enumeratori dogadjaja.

@code
enum evtId {
    ZERO_EVT_ID = ES_EVT_ID_USR,
    EVENT_TABLE(ES_EXPAND_EVT_ID)
    LAST_EVT_ID
}
@endcode
<b>Listing 6</b> -  

Prvi enumerator je ZERO_EVT_ID. eSolid poseduje nekoliko predefinisanih 
dogadjaja, sa svojim identifikatorima, i korisnicki definisani dogadjaji moraju
da nastave enumeratorski niz od pozicije gde je eSolid zavrsio. Zbog navedene
cinjenice ZERO_EVT_ID prima vrednost ES_EVT_ID_USR. Zadnji enumerator je
LAST_EVT_ID. On se koristi da specificira zadnji identifikator dogadjaja. 
Izmedju navedenih enumeratora postavlja se makro tabele @c EVENT_TABLE sa
argumentom @ref ES_EXPAND_EVT_ID. Naime, ovaj makro vrsi transformaciju makro
tabele u navodjenje enumeratora. Svi identifikatori dogadjaja koji su navedeni u
makro tabeli se putem @ref ES_EXPAND_EVT_ID makroa transformisu u odgovarajuce
enumeratore.

@section        evt_configuration Konfiguracija dogadjaja

Za konfiguraciju dogadjaja pogledati @ref evt_cfg.
    
*/