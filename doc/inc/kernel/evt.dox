/*********************************************************************************************//**
@file
@addtogroup  kernel_intf
*//** @{ *//**
@defgroup       evt_intf Event (EVT)
@brief          Interfejs Event (EVT) objekata
@section        evt_doc Event (EVT)
@image          html    eSolid_EVT.png
Event (u daljem tekstu EVT) modul vrsi definisanje objekta dogadjaja. Objekat
dogadjaj ima definisane atribute i metode.

Sa obzirom da postoji potreba za dogadjajima koji sadrze veliku kolicinu 
podataka, kopiranje celih dogadjaja postaje izuzetno neefikasan proces. Zbog 
toga se koristi <i>zero-copy</i> politika, gde se ne kopiraju podaci dogadjaja 
vec samo pokazivaci prema njima. Na ovaj nacin se postize vrlo velika propusnost 
sistema.
    
@note           Dogadjaj koji poseduje samo identifikator zove se @a signal.

Dogadjaji poseduju zaglavlje koje definise eSolid i telo koje definise sam
korisnik. Zaglavlje nosi osnovne informacije o samom dogadjaju kao sto su 
identifikator dogadjajaja, velicina i slicno, a u telu dogadjaja se nalaze 
podaci koji se prenose u dogadjaju.

Slanje dogadjaja sa aspekta korisnika se sastoji iz tri faze:
- kreiranje praznog dogadjaja
- popunjavanje tela dogadjaja podacima
- prihvatanje dogadjaja od strane eSolid-a

@subsection     evt_representation Reprezentacija dogadjaja
@image          html    evt_struct.png
Zaglavlje dogadjaja je opisano strukturom: @ref esEvt. 

@section        evt_usage Koriscenje EVT modula
@subsection     evt_defining_evt Definisanje dogadjaja

Pre upotrebe dogadjaja potrebno je definisati zaglavlje dogadjaja. Za defisanje 
zaglavlja dogadjaja koriste se pretprocesorske opcije navedene u datoteci 
@ref kernel_config.h. U zavisnosti od izabranih pretprocesorskih opcija 
zaglavlje dogadjaja moze cuvati razne informacije. Za nadogradjivanje podataka 
na zaglavlje dogadjaja se koristi poseban princip nasledjivanja u C-u. Naime, 
sistem definise strukturu zaglavlja dogadjaja, a programer posredstvom 
nasledjivanja formira dogadjaj sa dodatnim podacima.  

@subsection     evt_create Kreiranje dogadjaja i popunjavanje podacima

Kreiranje praznog dogadjaja se vrsi pozivom funkcije esEvtCreate(). Ova 
funkcija prihvata dva parametara:
- velicina dogadjaja. Ovde se podrazumeva koliko bajtova zauzimaju zaglavlje 
i telo dogadjaja. Sa obzirom da je ponekad tesko dati procenu zauzeca 
podataka u memoriji, kao i zbog vece portabilnosti koda, ovde se preporucuje 
upotreba unarnog operatora @c sizeof.
- identifikator dogadjaja. Svaki dogadjaj je jedinstven i razlikuje se barem 
po identifikatoru. Identifikator je jedinstven broj koji opisuje jednu vrstu 
dogadjaja. Programer moze eksplicitno koristiti brojeve za identifikatore, ali 
se preporucuje upotreba enumeratora jer pruza tu pogodnost da se po imenu 
enumeratora zakljuci sa kojim dogadjajem se radi.

Funkcija vraca pokazivac na memorijski prostor koji je rezervisan za ovaj 
dogadjaj. Zbog ovoga funkcija se ponasa vrlo slicno poznatoj C funkciji 
@c malloc().

Posredstvom dobivenog pokazivaca na rezervisanu memoriju vrsimo popunjavanje
dogadjaja potrebnim podacima. Prilikom kreiranja dogadjaja zaglavlje se 
automatski popunjava podrazumevanim vrednostima.

@subsection     evt_send Slanje dogadjaja EPA objektu

Nako popunjavanja dogadjajima on se moze poslati zeljenom EPA objektu. Slanje
dogadjaja se vrsi funkcijama esEvtPost() koja salje dogadjaj na kraju reda za 
cekanje. To znaci da ce onim redom kojim su pristizali dogadjaji da ce tim redom
i biti obradjeni. Druga alternativna funkcija za slanje dogadjaja je 
esEvtPostAhead() koja postavlja dogadjaj na pocetak reda za cekanje. To znaci da
ce taj dogadjaj biti obradjen pre ostalih dogadjaja.

@subsection     evt_example Primer definisanja, kreiranja i slanja dogadjaja 

U ovoj sekciji koristicemo primer dogadjaja koji se koristi u nekom sistemu. 
Dogadjaj ima identifikator koji je numerisan (enumerator) i neka je taj 
enumerator @c SIG_GET_DATA. Ovaj dogadjaj je tipa @c PARAM_EXCHANGE i sa sobom 
nosi tri korisnicka podatka: @c ID, @c type i @c data. Navedeni podaci se nalaze 
u strukturi koju definise korisnik. Dogadjaj treba da se posalje EPA objektu, 
odnosno, agentu za obradu dogadjaja sa nazivom @c AO_param.

Identifikator dogadjaja (enumerator):
    - SIG_GET_DATA

Tip dogadjaja (enumerator):
    - PARAM_EXCHANGE

Struktura podataka dogadjaja:
    - param.ID
    - param.type
    - param.data

<b>Resenje:</b>

Neka je definicija strukture podataka koji treba da se prenesu jednim dogadjajem 
sledeca:

@code
typedef struct paramData {
    uint8_t     ID
    uint8_t     type
    uint16_t    data
} paramData_T;
@endcode

Za prenos gore navedene strukture treba da se definise struktura dogadjaja koja 
se sastoji od zaglavlja @c header, koju definise sistem, i korisnicke strukture 
podataka @c param, koju definise aplikacija:

@code
typedef struct paramExchange {
    esEvtHeader_T   header;
    paramData_T     param;
} paramExchange_T;
@endcode

Medjutim, potrebno je preneti i podatak o tipu dogadjaja (PARAM_EXCHANGE). Ova 
informacija se ne prenosi putem zaglavlja dogadjaja pa je zato potrebno ručno 
ugraditi i ovu informaciju u strukturu paramExchange_T:

@code
typedef struct paramExchange {
    esEvtHeader_T   header;
    enum evtType    type;
    paramData_T     param;
} paramExchange_T;
@endcode

Sledi primer kreiranja dogadjaja tipa @c paramExchange_T sa signalom 
@c SIG_GET_DATA. Najpre je potrebno definisati pokazivac na dogadjaj, a 
zatim kreiramo nov, prazan dogadjaj velicine @c paramExchange_T, sa 
identifikatorom @c SIG_GET_DATA.

@code
paramExchange_T * pEvt;
pEvt = (paramExchange_T *)esEvtCreate(
    sizeof(paramExchange_T),
    (esEvtID_T)SIG_GET_DATA);
@endcode

Zbog kraceg pisanja uveden je pomocni makro EOT_PLN_CREATE koji prihvata tip 
dogadjaja i identifikator dogadjaja. Makro se koristi na sledeci nacin:

@code
paramExchange_T * pEvt;
pEvt = ES_EVT_CREATE(paramExchange_T, SIG_GET_DATA);
@endcode

Nakon sto je kreiran nov dogadjaj, treba se izvrsiti njegovo popunjavanje 
podacima.

Zaglavlje moze da cuva sledece informacije: identifikator, generator dogadjaja, 
vremenski marker nastanka dogadjaja i zauzece dogadjaja. 

Upis tipa dogadjaja se vrsi na sledeci nacin:

@code
pEvt->type = PARAM_EXCHANGE;
@endcode

Sa ovim smo izvrsili popunjavanjem informacija koje opisuju dogadja,a sada se 
prelazi na popunjavanje ostalim korisnickim podacima:

@code
pEvt->param.ID   = AVENT_SPEED3;
pEvt->param.type = TYPE1;
pEvt->param.data = 0;
@endcode

Sada su zaglavlje i telo dogadjaja potpuno popunjeni podacima. Medjutim, 
dogadjaj jos nije poslat, samo je kreiran. Da bi se ovako kreiran dogadjaj 
poslao potrebno je pozvati funkcuju esEvtPost() ili esEvtPostAhead(). 
Funkcija prihvata sledece parametre:
- pokazivac na agenta za obradu dogadjaja (EPA) i 
- pokazivac na prethodno definisan dogadjaj.

@code
esEvtPost(
    AO_param,
    (esEvtHeader_T *)pEvt);
@endcode

Funkcija prihvata parametre i dogadjaj prosledjuje navedenom agentu za obradu 
dogadjaja.

@subsection     evt_recv_evt Primanje dogadjaja

Primanje dogadjaja se obavlja automatski od strane sistema. Kada EPA objekat 
dodje na red za izvrsenje njemu se predaje dogadjaj na obradu preko parametra.
U funkciji stanja korisnik treba da koristi @c switch-case strukturu kako bi
odredio o kakvom se dogadjaju radi.
     
**//** @} *//*************************************************************************************/
