/*********************************************************************************************//**
 *
 * @file
 *
 * ------------------------------------------------------------------------------------------------
 *
 * @addtogroup  core_intf
 *
 ****************************************************************************************//** @{ */
/**
 * @defgroup    smp_intf State Machine Processor (SMP)
 *
 * @brief       Procesor dogadjaja.
 *
 *************************************************************************************************
 
@section        doc_smp State Machine Processor

@image          html    eSolid_SMP.png

    SMP modul moze konkurentno da izvrsava razlicite tipove automata i 
    korisnicke funkcije.
    
@section        smp_exec Tip izvrsne jedinice

    SMP moze konkurentno da pokrece:
    - @ref smp_fsm_type
    - @ref smp_hsm_type
    - @ref smp_exec_type

    @subsection  smp_exec_type Korisnicke RTC funkcije

    eSolid omogucava da se izvrsna jedinica sastoji samo od jednog skupa 
    funkcija koje ne formiraju FSM ili HSM automate. U FSM i HSM automate po 
    prirodi je ugrajden model Run To Completion, a na ovu cinjenicu se oslanja 
    eSolid da ce FSM ili HSM automat u neko kratko vreme vratiti kontrolu 
    sistemu. Zbog toga sa izvrsna jedinica mora pisati po RTC modelu, odnosno, 
    funkcije kojima se predaje dogadjaj na obradu moraju u neko dogledno vreme 
    predati kontrolu nazad sistemu.

@subsection     smp_fsm_type FSM automat

    Opisani su strukturama:
    - smp_exec
    - smp_fsmClass.

@subsection     smp_hsm_type HSM automat

    Opisani su strukturama:
    - smp_exec
    - smp_hsmClass.

@section        smp_use Koriscenje SMP modula

    Najpre je potrebno izvrsiti inicijalizaciju SMP modula. U inicijalizaciji se 
    vrsi definisanje unapred rezervisanih dogadjaja koji su potrebni za rad HSM 
    i FSM automata. Inicijalizacija se vrsi funkcijom eS_smpInit(). Zatim se
    vrsi inicijalizacija date izvrsne jedinice. U tu svrhu se poziva funkcija 
    koja je zaduzena za dati tip izvrsne jedinice, odnosno, poziva se 
    eS_hsmInit() ili eS_fsmInit, zavisno od tipa upotrebljenog automata. 
    Funkciji se predaje pokazivac na automat, @c aHSM i adresa inicijalne 
    funkcije stanja. Nakon sto su izvrsene pomenute inicijalizacije moze se 
    pozivati dispecer funkcija.

    Automat se pise po (FIXME: link) navedenim pravilima. Sledi koncept primer 
    za HSM izvrsnu jedinicu. Definicija automata se nalazi u datoteci 
    "automat.c", a interfejs u "automat.h". U primeru je prikazan programski kod 
    za HSM automat, ali za ostale izvrsne jedinice programski kod je gotovo 
    istovetan.

    @code
    #include "automat.h"

    int main (
        void) {

        eS_smpInit();
        eS_hsmInit(aHSM, &initState);

        while (TRUE) {
            *pEvt = {
            /* ... */
            };

            eS_hsmDispatch(aHSM, pEvt);
        }
    }
    @endcode
 
**//** @} *//*************************************************************************************/
 