/*********************************************************************************************//**
 *
 * @file
 *
 * ------------------------------------------------------------------------------------------------
 *
 * @addtogroup  core_intf
 *
 ****************************************************************************************//** @{ */
/**
 * @defgroup    smm_intf Simple Memory Management (SMM)
 *
 * @brief       Jednostavan alokator memorije za potrebe eSolid-a
 *
 *************************************************************************************************

@section        doc_smm Simple Memory Management

@image          html    eSolid_SMM.png

    U SMM modulu su implementirani sledeci algoritmi:
    - @ref smm_ff_alloc
    
    
@section        smm_ff_alloc First Fit algoritam

    U ovom algoritmu, alokator cuva listu slobodnih blokova i po prijemu 
    zahteva za memoriju, skenira duz liste za prvim blokom koji je dovoljno 
    veliki da opsluzi zahtev. Ako je izabrani blok dovoljno veci nego sto je
    zahtevano onda se blok deli na dva dela, jedan deo se predaje korisniku, a
    drugi blok se postavlja nazad u listu slobodnih blokova.
    Kada se vrsi reciklaza blokova, najpre se proveravaju susedni blokovi da li
    su zauzeti. Susedni blokovi koji su slobodni spajaju se sa blokom koji se
    reciklira i na taj nacin formira novi, veci blok.

@subsection     smm_ff_specs Specifikacija

    <i>Funkcija memAlloc:</i>
<table border>
    <tr>
        <td><b>Rbr.</b></td>
        <td><b>Atribut</b></td>
        <td><b>Opis</b></td>
        <td><b>Vrednost</b></td>
    </tr>

    <tr>
        <td>1.</td>
        <td>Trajanje (min)</td>
        <td>Minimalno trajanje izvrsavanja f-je (Cortex-M3 arch)</td>
        <td>29-34 instrukcija</td>
    </tr>
    <tr>
        <td>2.</td>
        <td>Trajanje (max)</td>
        <td>Maksimalno trajanje izvrsavanja f-je (Cortex-M3 arch)</td>
        <td>Neodredjeno (dok se ne pronadje odgovarajuci blok)</td>
    </tr>
    <tr>
        <td>3.</td>
        <td>Granulacija</td>
        <td>Zaokruzivanje zahtevane velicine na neku vecu velicinu</td>
        <td>1B, nema zaokruzivanja, dobija se blok tacno zahtevane velicine (napomena 1.)</td>
    </tr>
    <tr>
        <td>4.</td>
        <td>Velicina zahtevanog bloka (min)</td>
        <td>Velicina najmanjeg moguceg bloka koji alokator moze da kreira (napomena 2.)</td>
        <td>8B</td>
    </tr>
    <tr>
        <td>5.</td>
        <td>Velicina zahtevanog bloka (max)</td>
        <td>Velicina najveceg moguceg bloka koji alokator moze da kreira (napomena 3.)</td>
        <td>2,147,483,647B</td>
    </tr>
    <tr>
        <td>6.</td>
        <td>Staticka potrosnja memorijskog prostora</td>
        <td>Memorija koja se koristi od strane alokatora (static promenljive + heap organizacija)</td>
        <td>28B</td>
    </tr>
    <tr>
        <td>7.</td>
        <td>Potrosnja memorijskog prostora po zauzetom bloku</td>
        <td>Dodatna memorija koja se koristi za rezijske poslove alokatora po jednom zauzetom bloku</td>
        <td>8B</td>
    </tr>
    <tr>
        <td>8.</td>
        <td>Potrosnja ROM memorije</td>
        <td>Zauzece implementacije funkcije u izvrsnoj memoriji</td>
        <td>108B (optimizacija po velicini)</td>
    </tr>
</table>
    <i>Napomene:</i>
    - 1. Ukoliko je slobodni blok vrlo male velicine onda alokator moze dodeliti
    korisniku blok vece velicine nego cto je zahtevao. Ovaj efekat se javlja
    ukoliko se traze velicine bliske vrednosti dva puta vecoj od 
    minimalne velicine zahtevanog bloka (parametar 4.).
    - 2. Ukoliko korisnik zahteva blok manje od minimalne velicine ili blok 
    velicine 0B, alokator ce uvek alocirati blok koji ima minimalnu velicinu 
    datu u parametru 4. 
    - 3. Uslov je da sistem poseduje potrebnu kolicinu memorije.
    
    <i>Konacna implementacija:</i>
@code
    push    {r4, lr}
    cmp     r0, #7
    it      ls
    movls   r0, #8
    mrs     r1, basepri                 @ Cuvanje prioriteta prekida (HAL_CRITICAL_ENTER)
    movs    r3, #64
    msr     basepri, r3                 @ Postavljanje novog prioriteta prekida
    ldr     r3, .L9                     @ Uzimanje adrese cuvara slobodne liste
    ldr     r4, [r3, #0]
    ldr     r3, [r4, #8]
.L7:                                    @ Pocetak do-while petlje
    ldr     r2, [r3, #0]
    cmp     r2, r0
    bcc     .L3
    add     r4, r0, #16
    cmp     r2, r4
    bcc     .L4
    subs    r2, r2, r0
    sub     r4, r2, #8
    str     r4, [r3, #0]
    adds    r3, r3, r2
    str     r0, [r3, #0]
    adds    r0, r0, #8
    adds    r0, r3, r0
    ldr     r2, [r0, #4]
    str     r2, [r3, #4]
    str     r3, [r0, #4]
    b       .L5
.L4:
    ldr     r2, [r3, #8]
    ldr     r0, [r3, #12]
    str     r0, [r2, #12]
    ldr     r0, [r3, #12]
    str     r2, [r0, #8]
.L5:
    ldr     r2, [r3, #0]
    mov     r0, r3
    orr     r2, r2, #-2147483648        @ MSB marker
    str     r2, [r0], #8
    msr     basepri, r1                 @ Povratak starog prioriteta prekida (HAL_CRITICAL_EXIT)
    pop     {r4, pc}                    @ Izlazak iz funkcije - blok je pronadjen
.L3:                                    @ Kraj do-while petlje
    ldr     r3, [r3, #8]
    cmp     r4, r3
    bne     .L7
    msr     basepri, r1                 @ Povratak starog prioriteta prekida (HAL_CRITICAL_EXIT)
    movs    r0, #0
    pop     {r4, pc}                    @ Izlazak iz funkcije - nijedan blok nije pronadjen

.L9:
    .word   smm_heapSentinel
@endcode

    <i>Funkcija memDeAlloc:</i>
    <table border>
    <tr>
        <td><b>Rbr.</b></td>
        <td><b>Atribut</b></td>
        <td><b>Opis</b></td>
        <td><b>Vrednost</b></td>
    </tr>

    <tr>
        <td>1.</td>
        <td>Trajanje (min)</td>
        <td>Minimalno trajanje izvrsavanja f-je (Cortex-M3 arch)</td>
        <td>28 instrukcija</td>
    </tr>
    <tr>
        <td>2.</td>
        <td>Trajanje (max)</td>
        <td>Maksimalno trajanje izvrsavanja f-je (Cortex-M3 arch)</td>
        <td>51 instrukcija</td>
    </tr>
    <tr>
        <td>3.</td>
        <td>Potrosnja ROM memorije</td>
        <td>Zauzece implementacije funkcije u izvrsnoj memoriji</td>
        <td>124B (optimizacija po velicini)</td>
    </tr>
</table>

@subsection     smm_ff_summary Kratak pregled first fit alokatora

    - Maksimalno vreme izvrsavanja operacije alokacije bloka @b nije unapred 
        poznato. Zbog navedene cinjenice alokator nije pogodan za hard real-time
        sisteme.
    - Maksimalno vreme izvrsavanja operacije dealokacije bloka je unapred 
        poznato. 
    - Ukupno minimalno zauzece RAM memorije (Cortex-M3 arch): @b 28B
    - Ukupno zauzece ROM memorije od strane svih funkcija (Cortex-M3 arch, 
        optimizacija po zauzecu):  @b 322B

@section        smm_tlsf_alloc TLSF algoritam

    TLSF struktura podataka se moze predstaviti kao dvodimenzioni niz pokazivaca 
    na slobodne blokove memorije. Prva dimenzija deli slobodne blokove u blokove 
    cija je razlika velicina dva susedna bloka jednaka stepenu dvojke. Druga 
    dimenzija deli svaki opseg prve dimenzije na linearno razmaknute blokove 
    istih sirina.

@section        smm_configuration Konfiguracija SMM modula

    Za konfiguraciju SMM modula pogledati @ref smm_cfg.
    
**//** @} *//*************************************************************************************/
 