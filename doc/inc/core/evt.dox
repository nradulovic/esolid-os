/*********************************************************************************************//**
 *
 * @file
 *
 * ------------------------------------------------------------------------------------------------
 *
 * @addtogroup  epe_intf
 *
 ****************************************************************************************//** @{ */
/**
 * @defgroup    evt_intf Event Object (EO)
 *
 * @brief       Transport dogadjaja izmedju agenata za obradu dogadjaja
 *
 *************************************************************************************************

@section        doc_evt Event Object Transportation

@image          html eSolid_evt.png

    Event Object (u daljem tekstu EO) podmodul vrsi definisanje dogadjaja 
    i njihov transport izmedju objekata.

    Sa obzirom da postoji potreba za dogadjajima koji sadrze veliku kolicinu 
    podataka, kopiranje celih dogadjaja postaje izuzetno neefikasan proces. Zbog 
    toga se uvodi pojam "zero-copy" politika, gde se ne kopiraju podaci 
    dogadjaja vec samo pokazivaci prema njima. Na ovaj nacin se postize vrlo 
    velika propusnost sistema.
    
@note           Dogadjaj koji poseduje samo identifikator zove se @a signal.

    Dogadjaji poseduju zaglavlje koje definise eSolid i telo koje definise sam 
    korisnik. Zaglavlje nosi osnovne informacije o samom dogadjaju kao sto 
    identifikator dogadjajaja, tip dogadjaja, velicina i slicno, a u telu 
    dogadjaja se nalaze podaci koji se prenose u dogadjaju.

    Slanje dogadjaja sa aspekta korisnika se sastoji iz tri faze:
    - kreiranje praznog dogadjaja
    - popunjavanje tela dogadjaja podacima
    - prihvatanje dogadjaja od strane eSolid-a
    
@section        evt_repr Reprezentacija dogadjaja

    Zaglavlje dogadjaja je opisano strukturom: esEvtHeader_T.

@image          html evt_struct.png

@section        evt_use Koriscenje Event Object podmodula

@subsection     evt_define Definisanje dogadjaja i klase dogadjaja

    Pre upotrebe dogadjaja potrebno je definisati zaglavlje dogadjaja. Za 
    defisanje dogadjaja zaglavlja se koriste pretprocesorske opcije navedene u 
    datoteci @ref evt_cfg.h. U zavisnosti od izabranih pretprocesorskih opcija
    zaglavlje dogadjaja moze cuvati razne informacije. Za nadogradjivanje 
    podataka na zaglavlje dogadjaja se koristi poseban princip nasledjivanja u 
    C-u. Naime, sistem definise strukturu zaglavlja dogadjaja, a programer 
    posredstvom nasledjivanja formira dogadjaj sa dodatnim podacima.  

    U ovoj sekciji koristicemo primer dogadjaja koji se koristi u nekom sistemu. 
    Dogadjaj ima identifikator koji je numerisan (enumerator) i to je 
    @c SIG_GET_DATA. Ovaj dogadjaj je tipa @c PARAM_EXCHANGE i sa sobom nosi tri 
    korisnicka podatka: ID, type i data. Navedeni podaci se nalaze u strukturi 
    koju definise korisnik. Dogadjaj treba da se posalje agentu za obradu 
    dogadjaja AOBJ_PARAM.

    Identifikator dogadjaja (enumerator):
    - SIG_GET_DATA

    Tip dogadjaja (enumerator):
    - PARAM_EXCHANGE

    Struktura podataka dogadjaja:
    - param.ID
    - param.type
    - param.data

    <b>Resenje:</b>

    Neka je definicija strukture podataka koji treba da se prenesu jednim 
    dogadjajem sledeca:

    @code
    typedef struct paramData {
        uint8_t     ID
        uint8_t     type
        uint16_t    data
    } paramData_T;
    @endcode

    Za prenos gore navedene strukture treba da se definise struktura dogadjaja 
    koja se sastoji od zaglavlja @c super, koju definise sistem, i korisnicke 
    strukture podataka @c param, koju definise aplikacija:

    @code
    typedef struct paramExchange {
        esEvtHeader_T   header;
        paramData_T     param;
    } paramExchange_T;
    @endcode

@subsection     evt_send_evt Kreiranje i slanje dogadjaja

    <i><b> Prosta reprezentacija dogadjaja </b></i>

    Kreiranje praznog dogadjaja se vrsi pozivom funkcije esEvtCreate(). Ova 
    funkcija prihvata dva parametara:
    - velicina dogadjaja. Ovde se podrazumeva koliko bajtova zauzimaju zaglavlje 
    i telo dogadjaja. Sa obzirom da je ponekad tesko dati procenu zauzeca 
    podataka u memoriji, kao i zbog vece portabilnosti koda, ovde se preporucuje 
    upotreba unarnog operatora @c sizeof.
    - identifikator dogadjaja. Svaki dogadjaj je jedinstven i razlikuje se barem 
    po identifikatoru. Identifikator je jedinstven broj koji opisuje jednu vrstu 
    dogadjaja. Programer moze eksplicitno koristiti brojeve za identifikatore, 
    ali se preporucuje upotreba enumeratora jer pruza tu pogodnost da se po 
    imenu enumeratora zakljuci sa kojim dogadjajem se radi.

    Funkcija vraca pokazivac na memorijski prostor koji je rezervisan za ovaj 
    dogadjaj. Zbog ovoga funkcija se ponasa vrlo slicno poznatoj funkciji 
    @c malloc().

    Sledi primer kreiranja dogadjaja tipa @c paramExchange_T sa signalom 
    @c SIG_GET_DATA. Najpre je potrebno definisati pokazivac na dogadjaj, a 
    zatim kreiramo nov, prazan dogadjaj velicine @c paramExchange_T, sa 
    identifikatorom @c SIG_GET_DATA.

    @code
    paramExchange_T * pEvt;
    pEvt = (paramExchange_T *)esEvtCreate(
        sizeof(paramExchange_T),
        (esEvtID_T)SIG_GET_DATA);
    @endcode

    Zbog kraceg pisanja uveden je pomocni makro EOT_PLN_CREATE koji prihvata tip 
    dogadjaja i identifikator dogadjaja. Makro se koristi na sledeci nacin:

    @code
    paramExchange_T * pEvt;
    pEvt = EVT_CREATE(paramExchange_T, SIG_GET_DATA);
    @endcode

    Nakon sto je kreiran nov dogadjaj, treba se izvrsiti njegovo popunjavanje 
    podacima.

    Zaglavlje moze da cuva sledece informacije: tip dogadjaja, posiljalac 
    dogadjaja, vremenski marker nastanka dogadjaja, zauzece dogadjaja i 
    identifikator dogadjaja. Prilikom kreiranja dogadjaja zaglavlje dogadjaja se
    automatski popunjava podrazumevanim vrednostima.

    Upis tipa dogadjaja se vrsi na sledeci nacin:

    @code
    pEvt->header.type = PARAM_EXCHANGE;
    @endcode

    Sa ovim smo izvrsili popunjavanje informacija u zaglavlju dogadjaja, sada se 
    prelazi na popunjavanje dogadjaja ostalim korisnickim podacima:

    @code
    pEvt->param.ID   = AVENT_SPEED3;
    pEvt->param.type = TYPE1;
    pEvt->param.data = 0;
    @endcode

    Sada su zaglavlje i telo dogadjaja potpuno popunjeni podacima. Medjutim, 
    dogadjaj jos nije poslat, samo je definisan. Da bi se ovako definisan 
    dogadjaj poslao potrebno je pozvati funkcuju esEvtPost() ili esEvtPostAhead(). 
    Funkcija prihvata sledece parametre:
    - pokazivac na agenta za obradu dogadjaja (EPA) i 
    - pokazivac na prethodno definisan dogadjaj.

    @code
    esEvtPost(
        &AOBJ_PARAM,
        (esEvtHeader_T *)pEvt);
    @endcode

    Funkcija prihvata navedene parametre i dogadjaj prosledjuje navedenom 
    agentu za obradu dogadjaja.

@subsection     evt_recv_evt Primanje dogadjaja
     
**//** @} *//*************************************************************************************/
